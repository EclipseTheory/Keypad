
1: Drop all the files on their indicated locations.
2: Go to server/player.cpp:

-Include the header of point_keypad before the #include "tier0/memdbgon.h" line: 
#include "point_keypad.h"

-Find:

	else if ( stricmp( cmd, "playerperf" ) == 0 )
	{
		int nRecip = entindex();
		if ( args.ArgC() >= 2 )
		{
			nRecip = clamp( Q_atoi( args.Arg( 1 ) ), 1, gpGlobals->maxClients );
		}
		int nRecords = -1; // all
		if ( args.ArgC() >= 3 )
		{
			nRecords = MAX( Q_atoi( args.Arg( 2 ) ), 1 );
		}

		CBasePlayer *pl = UTIL_PlayerByIndex( nRecip );
		if ( pl )
		{
			pl->DumpPerfToRecipient( this, nRecords );
		}
		return true;
	}
	
-Paste the following after it (in the case you can't find it, just place it
inside the "bool CBasePlayer::ClientCommand( const CCommand &args )" function ):

	//Keypad
	else if (stricmp(cmd, "keypad_codematch"))
	{

		CBaseEntity *pEntity = NULL;

		//while ((pEntity = gEntList.FindEntityByClassnameWithin(pEntity, "player", GetLocalOrigin(), 512)) != NULL)
		//	CBasePlayer *pPlayer = ToBasePlayer(pEntity);


		while ((pEntity = gEntList.FindEntityInSphere(pEntity, GetLocalOrigin(), 512)) != NULL)//512 
		{
			if (FClassnameIs(pEntity, "point_keypad"))
			{
				edict_t *pFind;
				pFind = pEntity->edict();

				CBaseEntity *pEnt = CBaseEntity::Instance(pFind);
				CPointKeypad *pKeypadSettings = (CPointKeypad *)pEnt;

					//DevMsg("code_match - firing FireTarget\n");

					pKeypadSettings->FireTarget();

					return true;
			}
		}
	}
	else if (stricmp(cmd, "keypad_codedismatch"))
	{
		CBaseEntity *pEntity = NULL;

		//	while ((pEntity = gEntList.FindEntityByClassnameWithin(pEntity, "player", GetLocalOrigin(), 512)) != NULL)
		//	CBasePlayer *pPlayer = ToBasePlayer(pEntity);

		//same as above, but calls a different function
		while ((pEntity = gEntList.FindEntityInSphere(pEntity, GetLocalOrigin(), 512)) != NULL)//512
		{
			if (FClassnameIs(pEntity, "point_keypad"))
			{
				edict_t *pFind;
				pFind = pEntity->edict();

				CBaseEntity *pEnt = CBaseEntity::Instance(pFind);
				CPointKeypad *pKeypadSettings = (CPointKeypad *)pEnt;

					//DevMsg("code_dismatch - firing WrongCode\n");

					pKeypadSettings->WrongCode();

					return true;
			}
		}
	}
	
3: Go to shared/hl2/hl2_usermessages.cpp, and add the following 
inside the "void RegisterUserMessages( void )" function:

usermessages->Register("KeypadHandler", -1); //Keypad

4: After these steps, your keypad should be working.